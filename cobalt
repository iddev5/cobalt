#!/usr/bin/python3

# Cobalt Build System - 0.0.2
# Copyright (C) 2020, 2021 Ayush Bardhan Tripathy.
# This project is licensed under MIT License (See LICENSE.md).

import os, sys, subprocess, shutil;
import json, argparse;

#################################
# Utilities
#################################

def_build_dir = "builddir";
def_proj_file_name = "Cobalt.json";
ninja_required_version = "1.5.1";

def make_dir(folder):
	if not os.path.exists(folder):
		os.mkdir(folder);

def get_files(path, ext, recurse):
	ret = [];
	for files in os.listdir(path):
		name = os.path.join(path, files);
		if os.path.isfile(name):
			if name.endswith(ext): ret += [name];
		elif recurse:
			ret += get_files(name, ext, True);
	return ret;

#################################
# Compiler command
#################################

def make_dir_list(proj_path, dir_list, prefix):
	to_ret = [];
	to_ret += [prefix + os.path.join(proj_path, i) for i in dir_list];
	return to_ret;

def make_include_dir(proj_path, include_dir_list):
	return make_dir_list(proj_path, include_dir_list, "-I");

def make_lib_dir(proj_path, lib_dir_list):
	return make_dir_list(proj_path, lib_dir_list, "-L");

def make_libs(libs_list):
	return make_dir_list("", libs_list, "-l");

def Ninja_write_file(project, file_name):
	with open(file_name, "w") as file:
		file.write("ninja_required_version = %s\n\n" % (ninja_required_version));
		
		file.writelines([
			"rule c_Compile\n",
			" command = cc -MD -MQ $out -MF '$DEPFILE' $c_FLAGS $INCLUDE_DIR -o $out -c $in\n",
			" deps = gcc\n",
			" depfile = $DEPFILE\n",
			" description = Compiling file$: $FILENAME\n\n"
		]);

		file.writelines([
			"rule c_Link\n",
			" command = cc -o $out $in $LIB_DIR $LIBS\n",
			" description = Linking project$: $LINKNAME\n\n"
		]);

		for i in range(len(project["src"])):
			source_name = project["source_list"][i];
			object_name = project["object_list"][i];

			file.writelines([
				"build %s: c_Compile %s\n" % (object_name, source_name),
				" DEPFILE = %s\n" % (object_name + ".d"),
				" INCLUDE_DIR = %s\n" % project["proc_include_dir"],
				" FILENAME = %s\n" % (project["src"][i])
			]);
		
		file.writelines([
			"build %s: c_Link " % (project["target_name"]),
			" ".join(project["object_list"]), "\n",
			" LIB_DIR = %s\n" %	project["proc_lib_dir"],
			" LIBS = %s\n" % project["proc_libs"],
			" LINKNAME = %s\n" % project["id"]
		]);

		file.write("default %s" % (project["target_name"]));
		file.write("\n\n");

#################################
# Project
#################################

def load_project(path):
	project = {};
	project_file = os.path.join(path, def_proj_file_name);
	
	if not os.path.isfile(project_file):
		print("The current directory has no Cobalt project in it!\nAborting.");
		return;
		
	with open(project_file) as file:
		project = json.load(file);

	project["path"] = path;
	return project;

def active_project(project):
	project["build_dir"] = os.path.join(project["path"], def_build_dir);
	project["bin_dir"] = os.path.join(project["build_dir"], "bin");
	project["object_dir"] = os.path.join(project["build_dir"], "object");

	project["target_name"] = os.path.join(project["bin_dir"], project["id"])

	make_dir(project["build_dir"]);
	make_dir(project["bin_dir"]);
	make_dir(project["object_dir"]);

#################################
# Run project
#################################

def Cobalt_run(project):
	if project["type"] == "application":
		file_name = os.path.join(project["bin_dir"], project["id"]);
		if not os.path.isfile(file_name):
			print("Project is not compiled.");
			return False;

		print("Launching application: %s" % (project["id"]));
		subprocess.run([os.path.join(project["bin_dir"], project["id"])]);
	else:
		print("Nothing to run!");

#################################
# Building project
#################################

def process_project(project):
	project["source_list"] = [];
	project["object_list"] = [];

	for source_file in project["src"]:
		file_name = os.path.join(project["path"], source_file);
		object_name = os.path.join(project["object_dir"], source_file.replace("/", "--") + ".o");

		if not os.path.isfile(file_name):
			print("File " + source_file + " not found.\nAborting!");
			return False;

		project["source_list"] += [file_name];
		project["object_list"] += [object_name];

	if "include_dir" in project:
		project["proc_include_dir"] = " ".join(make_include_dir(project["path"], project["include_dir"]));
	else: 
		project["proc_include_dir"] = "";

	if "lib_dir" in project:
		project["proc_lib_dir"] = " ".join(make_include_dir(project["path"], project["lib_dir"]));
	else:
		project["proc_lib_dir"] = "";

	if "libs" in project:
		project["proc_libs"] = " ".join(make_include_dir(project["path"], project["libs"]));
	else:
		project["proc_libs"] = "";

def copy_runtime_data(project):
	if "runtime_data" not in project:
		return;

	for i in filter(list, project["runtime_data"]):
		dest = os.path.join(project["bin_dir"], os.path.basename(i));

		if dest != project["target_name"]:
			shutil.copyfile(i, dest);

def load_depends(project):
	if "depends" not in project:
		return;

	for depend in project["depends"]:
		depproj = load_project(os.path.join(project["path"], depend));
		active_project(depproj, "builddir");
		Cobalt_build(depproj);

		def define_x(x):
			if x not in project: project[x] = [];
			if x not in depproj: depproj[x] = [];

		define_x("include_dir");
		define_x("lib_dir");
		define_x("libs");
		define_x("runtime_data");
		define_x("target_name");
			
		if depproj["type"] == "application":
			project["runtime_data"] += [depproj["target_name"]];
		elif depproj["type"] == "module":
			project["include_dir"] += [depproj["include_dir"]];
			project["lib_dir"] += [depproj["lib_dir"]];
			project["libs"] += [depproj["libs"]];

		project["runtime_data"] += [depproj["runtime_data"]];

def Cobalt_build(project):
	load_depends(project);

	if project["type"] in ["application", "staticlib", "sharedlib"]:
		process_project(project);
		Ninja_write_file(project, os.path.join(project["build_dir"], "build.ninja"));
		subprocess.call(["ninja", "-C", project["build_dir"]]);
	
	copy_runtime_data(project);

#################################
# Project creation
#################################

def is_valid_project_type(type):
	types = ["application", "staticlib", "sharedlib", "module"];
	if type in types:
		return True;
	else:
		return False;

def Cobalt_create(name, type):
	project = {};
	project["id"] = name;
	project["type"] = type;

	if os.path.isfile(def_proj_file_name):
		print("A project already exists in this directory.\nAbort.");
		return;

	if not is_valid_project_type(type):
		print("Unrecognized project type \"%s\", changing to default (application)." % (type));
		project["type"] = "application";

	if os.path.exists("src"):
		project["src"]  = get_files("src", ".c", True);
		project["src"] += get_files("", ".c", False);

	if os.path.exists("include"):
		project["include_dir"] = "include";

	if os.path.exists("lib"):
		project["lib_dir"] = "lib";
		# project["libs"]    = get_files("lib", ".so", False);
	
	if os.path.exists("runtime_data"):
		project["runtime_data"] = get_files("runtime_data", "", True);

	with open(def_proj_file_name, "w") as project_file:
		json.dump(project, project_file, indent = 4);

	print("New project created in current working directory: %s" % (name));

#################################
# Main
#################################

usage = """cobalt [-h] command

Simple, minimalistic build system for C projects.

list of commands:
  new         Create a new project
  build       Build the project in current directory
""";

def main(argv):
	ap = argparse.ArgumentParser(
		usage = usage
	);
	ap.add_argument("command", help = "Subcommand to run");
	
	args = ap.parse_args(sys.argv[1:2]);

	if args.command == "new":
		nap = argparse.ArgumentParser();
		nap.add_argument("name", nargs = "?", default = os.path.basename(os.getcwd()));
		nap.add_argument("-t", "--type", type = str, default = "application");
		nargs = nap.parse_args(sys.argv[2:]);

		Cobalt_create(nargs.name, nargs.type);

	elif args.command == "build":
		proj_path = os.path.dirname(os.path.abspath(def_proj_file_name));

		if not os.path.isfile(os.path.join(proj_path, def_proj_file_name)):
			print("The current directory has no Cobalt project in it!\nAborting.");
			return 0;

		project = load_project(proj_path);
		active_project(project);

		Cobalt_build(project);
	
	elif args.command == "run":
		proj_path = os.path.dirname(os.path.abspath(def_proj_file_name));

		if not os.path.isfile(os.path.join(proj_path, def_proj_file_name)):
			print("The current directory has no Cobalt project in it!\nAborting.");
			return 0;
		
		project = load_project(proj_path);
		active_project(project);
		if not Cobalt_run(project):
			Cobalt_build(project);
			Cobalt_run(project);

if __name__ == "__main__":
	main(sys.argv);
